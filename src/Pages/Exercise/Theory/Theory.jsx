import React from 'react'
import ETPost from '../../../Components/Exercise/Theory/ETPost/ETPost'
import { NavLink } from 'react-router-dom'
import './Theory.css'

export const theoryExercise = [
	{
		title: 'Задание 1 (Графы)',
		text: '<b>Тема:</b>  Использование и анализ информационных моделей (таблицы, диаграммы, графики).<br/><br/><b>Что проверяется:</b><br/>Умение представлять и считывать данные в разных типах информационных моделей (схемы, карты, таблицы, графики и формулы).<br/><i>1.3.1.</i> Описание (информационная модель) реального объекта и процесса, соответствие описания объекту и целям описания. Схемы, таблицы, графики, формулы как описания<br/><i>1.2.2.</i> Умение интерпретировать результаты, получаемые в ходе моделирования реальных процессов.<br/><br/><b>Что нужно знать:</b><br/>• граф – это набор вершин и соединяющих их ребер; он описывается в виде таблицы (матрицы смежности или весовой матрицы)<br/>• чаще всего используется взвешенный граф, где с каждым ребром связано некоторое число (вес), оно может обозначать, например, расстояние между городами или стоимость перевозки<br/>• рассмотрим граф (рисунок слева), в котором 5 вершин (A, B, C, D и E); он описывается таблицей, расположенной в центре; в ней, например, число 4 на пересечении строки В и столбца С означает, что, во-первых, есть ребро, соединяющее В и С, и во-вторых, вес этого ребра равен 4; пустая клетка на пересечении строки А и столбца В означает, что ребра из А в В нет<br />• обратите внимание, что граф по заданной таблице (она еще называется весовой матрицей) может быть нарисован по-разному; например, той же таблице соответствует граф, показанный на рисунке справа от нее <br />• в приведенном примере матрица симметрична относительно главной диагонали; это может означать, например, что стоимости перевозки из В в С и обратно равны (это не всегда так)<br />• во многих задачах вес – это длина дороги из одного пункта в другой; для рассмотренного примера длина дороги из А в С равна 3, дороги из А в Е нет<br />• степень вершины – это количество рёбер, которые соединены с этой вершиной; при определении степени вершины по таблице нужно считать число непустых ячеек весовой матрицы в соответствующей строке (или столбце); в примере степень вершины А равна 2 (в первой строке две непустых ячейки со значениями 3 и 1)',
		path: '1',
		video: ['GV-zY20wJjg', 'bu1o-31Albo', 'dGwfpPjM2OA', 'jAcSLGmW8wM'],
		type: 'None',
	},
	{
		title: 'Задание 2 (Таблица истинности логического выражения)',
		text: '<b>Тема</b>: Анализ таблиц истинности логических выражений.<br /> <br /><b>Что проверяется:</b> <br/>Умение строить таблицы истинности и логические схемы.<br /><i>1.5.1. Высказывания, логические операции, кванторы, истинность высказывания</i> <br /> <i>1.1.6. Умение строить модели объектов, систем и процессов в виде таблицы истинности для логического высказывания</i> <br /><br /><b>Про обозначения</b><br /> К сожалению, обозначения логических операций И, ИЛИ и НЕ, принятые в «серьезной» математической логике (,,¬), неудобны, интуитивно непонятны и никак не проявляют аналогии с обычной алгеброй. Автор, к своему стыду, до сих пор иногда путает   и . Поэтому на его уроках операция «НЕ» обозначается чертой сверху, «И» – знаком умножения (поскольку это все же логическое умножение), а «ИЛИ» – знаком «+» (логическое сложение). В разных учебниках используют разные обозначения. К счастью, в начале задания ЕГЭ приводится расшифровка закорючек (,,¬), что еще раз подчеркивает проблему.<br /><br /><b>Что нужно знать:</b> <br /> • условные обозначения логических операций ¬ A, 		не A (отрицание, инверсия) A  B, 		A и B (логическое умножение, конъюнкция) A  B, 	 A или B (логическое сложение, дизъюнкция) A → B		 	импликация (следование) A  B		 	эквивалентность  (равносильность)<br /> • операцию «импликация» можно выразить  через «ИЛИ» и «НЕ»: A → B = ¬ A  B или в других обозначениях  A → B = <br />• иногда для упрощения выражений полезны формулы де Моргана:¬ (A  B) = ¬ A  ¬ B		¬ (A  B) = ¬ A  ¬ B		<br />• если в выражении нет скобок, сначала выполняются все операции «НЕ», затем – «И», затем  – «ИЛИ», «импликация», и самая последняя – «эквивалентность»<br />• таблица истинности выражения определяет его значения при всех возможных комбинациях исходных данных<br />• если известна только часть таблицы истинности, соответствующее логическое выражение однозначно определить нельзя, поскольку частичной таблице могут соответствовать несколько разных логических выражений (не совпадающих для других вариантов входных данных); <br />• количество разных логических функций, удовлетворяющих неполной таблице истинности, равно , где  – число отсутствующих строк; например, полная таблица истинности выражения с тремя переменными содержит 23=8 строчек, если заданы только 6 из них, то можно найти 28-6=22=4 разных логических функции, удовлетворяющие этим 6 строчкам (но отличающиеся в двух оставшихся)<br />• логическая сумма A + B + C + … равна 0 (выражение ложно) тогда и только тогда, когда все слагаемые одновременно равны нулю, а в остальных случаях равна 1 (выражение истинно)<br />• логическое произведение A · B · C · … равно 1 (выражение истинно) тогда и только тогда, когда все сомножители одновременно равны единице, а в остальных случаях равно 0 (выражение ложно)<br />• логическое следование (импликация) А→В равна 0 тогда и только тогда, когда A (посылка) истинна, а B (следствие) ложно<br />• эквивалентность АB  равна 1 тогда и только тогда, когда оба значения одновременно равны 0 или одновременно равны 1',
		path: '2',
		video: ['Th549LNTlOc', 'eKBEN8-KfbM', '62EEeuWuFWg', '0G8eoeubRz4'],
		type: 'Python',
	},
	{
		title: 'Задание 3 (Поиск информации в связанных таблицах)',
		text: '3',
		path: '3',
		video: ['', '', '', ''],
		type: 'Excel',
	},
	{
		title: 'Задание 4 (Неравномерное кодирование информации)',
		text: '4',
		path: '4',
		video: ['', '', '', ''],
		type: 'None',
	},
	{
		title: 'Задание 5 (Анализ и построение алгоритма обработки числа)',
		text: '5',
		path: '5',
		video: ['', '', '', ''],
		type: 'Python',
	},
	{
		title: 'Задание 6 (Анализ циклического алгоритма)',
		text: '6',
		path: '6',
		video: ['', '', '', ''],
		type: 'Python',
	},
	{
		title:
			'Задание 7 (Равномерное кодирование графической и звуковой информации)',
		text: '7',
		path: '7',
		video: ['', '', '', ''],
		type: 'None',
	},
	{
		title: 'Задание 8 (Комбинаторика)',
		text: '8',
		path: '8',
		video: ['', '', '', ''],
		type: 'Python',
	},
	{
		title: 'Задание 9 (Обработка числовой информации в электронных таблицах)',
		text: '9',
		path: '9',
		video: ['', '', '', '', '', ''],
		type: 'Excel',
	},
	{
		title: 'Задание 10 (Обработка числовой информации в электронных таблицах)',
		text: '10',
		path: '10',
		video: ['', '', '', ''],
		type: 'Word',
	},
	{
		title: 'Задание 11 (Поиск информации в связанных таблицах)',
		text: '3',
		path: '3',
		video: ['', '', '', ''],
		type: 'Excel',
	},
	{
		title: 'Задание 12 (Поиск информации в связанных таблицах)',
		text: '3',
		path: '3',
		video: ['', '', '', ''],
		type: 'Excel',
	},
]

function Theory() {
	return (
		<div className='Theory'>
			<div className='Theory-content'>
				<div className='Theory-content-title'>
					<h2>Теория</h2>
				</div>
				<ul className='Theory-content-catalog'>
					{theoryExercise.map((el, index) => (
						<NavLink to={`./${el.path}`} key={index}>
							<li>
								<ETPost {...el} />
							</li>
						</NavLink>
					))}
				</ul>
			</div>
		</div>
	)
}

export default Theory
